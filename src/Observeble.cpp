// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#define ModBusManager_ModBusNetwork_Observeble_BODY

/************************************************************
 Observeble class body
 ************************************************************/

// include associated header file
#include "Observeble.h"

// Derived includes directives

// Include from Include declaration (body)
using namespace std;
// End of Include declaration (body)


namespace src {

// static attributes (if any)

/**
 * Notify all observers
 */
void Observeble::notify() {
	for (std::vector<Observer*>::iterator ob = observerCollection.begin();
			ob != observerCollection.end(); ++ob) {
		try {
			(*ob.base())->update();
		} catch (exception &e) {
			throw "trying to notify observer";
		}
	}
}

/**
 * Construtor
 */
Observeble::~Observeble() {
}

/**
 * 
 * @param observer 
 */
void Observeble::add(Observer* /*in*/observer) {
	observerCollection.push_back(observer);
}

/**
 * 
 * @param observer 
 */
void Observeble::remove(Observer* /*in*/observer) {
	/*
	 * This method was not implemented
	 */
}

} // of src

/************************************************************
 End of Observeble class body
 ************************************************************/
