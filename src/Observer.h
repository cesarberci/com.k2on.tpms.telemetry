// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#ifndef MODBUSMANAGER_MODBUSNETWORK_OBSERVER_H
#define MODBUSMANAGER_MODBUSNETWORK_OBSERVER_H

/************************************************************
 Observer class header
 ************************************************************/

// Include from Include stereotype (header)
#include "Pkg_src.h"
// End of Include stereotype (header)


namespace src {

/************************************************************/
/**
 * <Observer Pattern>
 * 
 * Observer Abstract Class (Interface)
 * 
 * All observers must to implement this class, and so, the update method and a concrete destructor.
 */
class Observer {
public:

	/**
	 * <Observer Pattern>
	 * 
	 * This method is used to notify all observers due a change in the state of an observable
	 */
	virtual void update() = 0;

	/**
	 * Destructor method
	 * 
	 * This is a virtual method, but, it also have a concrete implementaion, so, it is not a abstract method.
	 * The concret implementation is necessary for delete objects created by derived subclasses.
	 */
	virtual ~Observer();

};
/************************************************************/
/* External declarations (package visibility)               */
/************************************************************/

/* Inline functions                                         */

} // of src


/************************************************************
 End of Observer class header
 ************************************************************/

#endif
